# Generated by Django 3.2 on 2021-12-15 18:02

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import management.validator
from django.contrib.postgres.operations import CreateExtension


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        CreateExtension('postgis'),
        migrations.CreateModel(
            name='Iran_adm1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shape_leng', models.FloatField()),
                ('shape_area', models.FloatField()),
                ('adm1_en', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=50)),
                ('adm1_pcode', models.CharField(max_length=50)),
                ('adm1_ref', models.CharField(max_length=50, null=True)),
                ('adm1alt1en', models.CharField(max_length=50, null=True)),
                ('adm1alt2en', models.CharField(max_length=50, null=True)),
                ('adm1alt1fa', models.CharField(max_length=50, null=True)),
                ('adm1alt2fa', models.CharField(max_length=50, null=True)),
                ('adm0_en', models.CharField(max_length=50)),
                ('adm0_fa', models.CharField(max_length=50)),
                ('adm0_pcode', models.CharField(max_length=50)),
                ('date', models.DateField()),
                ('validon', models.DateField()),
                ('validto', models.DateField(null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='Road',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, null=True)),
                ('width', models.FloatField()),
                ('geom', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='TollStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('toll_per_cross', models.FloatField()),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('small', 'Small'), ('big', 'Big')], max_length=10)),
                ('color', models.CharField(max_length=15)),
                ('length', models.FloatField(validators=[management.validator.validate_length])),
                ('load_volume', models.FloatField(null=True, validators=[management.validator.validate_load_volume])),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cars', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AllNodes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('date', models.DateTimeField()),
                ('car', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='management.car')),
            ],
        ),
        migrations.AddConstraint(
            model_name='car',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('type', 'small'), ('load_volume', None)), models.Q(('type', 'big'), models.Q(_negated=True, load_volume=None)), _connector='OR'), name='Check when type is small, load_volume be null'),
        ),
    ]
